nrow = 5)
# focal with 5x5 kernal using t-Test function and plume subset
signal <- focal(x = plu,
w = kernal.5,
fun = student.t)
#### Median Filter ####
# create 3x3 kernal
kernal.3 <- matrix(c(1,1,1,
1,1,1,
1,1,1),
nrow = 3)
# focal with 3x3 kernal using mean to smooth the mask
signal.md <- focal(x = signal,
w = kernal.3,
fun = median)
#### Gaussian Filter ####
# create gaussian kernal
kernal.g <- matrix(c(1,2,1,
2,4,2,
1,2,1),
nrow = 3)
# gaussian function
gaus <- function(x){
j <- sum(x)
x <- j/16
}
# focal with 3x3 kernal using gaussian filter to smooth the mask
signal.ga <- focal(x = signal.md,
w = kernal.g,
fun = gaus)
plot(signal.ga)
#### Threshold Gaussian Mask ####
mask <- signal.ga
mask[mask <= 0.2] <- NA
mask[mask > .02] <- 1
plu.mask <- mask(plu, mask)
#### IME Calculations ####
# mean pixel value
mean <- mean(getValues(plu.mask), na.rm = T)
# number of pixels
pixels <- freq(plu.mask, useNA = "no")
pixels <- sum(pixels[,2])
# pixel area [m2]
area <- (xres(plu.mask))^2
# plume area [m2]
p.area <- pixels*area
p.area <- signif(p.area, digits = 6)
# constants
ppm <- 0.000001           #parts per ppm
liter.m3 <- 1000          #liters per m3
mol.liter <- 0.04464      #moles per liter
kg.CH4 <- 0.01604         #kg per mole of CH4
# IME Equation [kg]
IME <- mean*area*ppm*liter.m3*mol.liter*kg.CH4*pixels
IME <- signif(IME, digits = 6)
#### define color/transparency ####
plu.capped <- plu.mask # creating a copy of your plume image that will be used to display the dynamic range
# needed for some scenes for good visuals
conc.max <- quantile(plu, 0.9975, na.rm = T) # highest pixel value
plu.capped[plu >= conc.max] = conc.max # assign all pixels greater than the highest pixel the highest pixel value
# define colors
cols <- rev(magma(256))
cols.trans <- c()
# add transparency sequentially and increasingly between the trans.start and trans.end
trans.start <- as.integer(length(cols)/3) # basically saying that the higher 2/3 of the color ramp are going to be opaque colors, and the lower 1/3 is going to transition from entirely transparent to entirely opaque
trans.end <- length(cols) # figuring out the color number to stop on for looping purposes
j <- 0 # starting a counter
for (i in seq(1,trans.end)){ # looping through your colors
rgb <- col2rgb(cols[i], alpha = T) # converting hex colors to RGB values
if (i <= trans.start){ # while you're still in the lower 1/3 (the semi-transparency range)...
rgb[4,] <- 255 * j / trans.start # adding an alpha (transparency) to your RGB values, controlled by j and trans.start
j <- j + 1 # add 1 to your counter j
}
rgb <- rgb / 255.0 # convert from 8 bit to 0-1
col <- rgb(rgb[1,], rgb[2,], rgb[3,], rgb[4,]) # create rgb color
cols.trans <- append(cols.trans, col) # add it back to your color ramp vector
}
#### plots ####
if (plots == TRUE){
dev.off()   # resets parameters from RGB plot
## Enhancement Plot ##
plot(brk.crop[[4]],
col = cividis(100),
main = paste(type,": Plume Enhancement [ppm/m]"),
cex.main = 2.5)
mypath <- file.path("D:","Documents","GEOG MS","ATMOS6240-Land_Atmo_Interactions",    # set save path
"project","Plume_Masking","plumes","Varon_Method",
paste(name,"_enhancement.png"))
dev.copy(png, filename = mypath, width = 1000, height = 784)       # save png
dev.off()
## Threshold Filter Plot ##
plot(plu, col = cividis(100),
main = paste(type,": 95th Percentil Plume [ppm/m]"),
cex.main = 2.5)
mypath <- file.path("D:","Documents","GEOG MS","ATMOS6240-Land_Atmo_Interactions",    # set save path
"project","Plume_Masking","plumes","Varon_Method",
paste(name,"_threshold.png"))
dev.copy(png, filename = mypath, width = 1000, height = 784)        # save png
dev.off()
## Signal-to-Noise Filter Plot ##
signal.mask <- signal
signal.mask[signal.mask == 0] <- NA
plume.signal <- mask(plu, signal.mask)
plot(plume.signal, col = cividis(100),
main = paste(type,": Signal/Noise Mask [ppm/m]"),
cex.main = 2.5)
mypath <- file.path("D:","Documents","GEOG MS","ATMOS6240-Land_Atmo_Interactions",    # set save path
"project","Plume_Masking","plumes","Varon_Method",
paste(name,"_SN.png"))
dev.copy(png, filename = mypath, width = 1000, height = 784)        # save png
dev.off()
## Median Filter Plot ##
signal.md.mask <- signal.md
signal.md.mask[signal.md.mask == 0] <- NA
plume.signal.md <- mask(plu, signal.md.mask)
plot(plume.signal.md, col = cividis(100),
main = paste(type,": Median Filter Mask [ppm/m]"),
cex.main = 2.5)
mypath <- file.path("D:","Documents","GEOG MS","ATMOS6240-Land_Atmo_Interactions",    # set save path
"project","Plume_Masking","plumes","Varon_Method",
paste(name,"_median.png"))
dev.copy(png, filename = mypath, width = 1000, height = 784)      # save png
dev.off()
## Gaussian Filter Plot ##
signal.ga.mask <- signal.ga
signal.ga.mask[signal.ga.mask == 0] <- NA
plume.signal.ga <- mask(plu, signal.ga.mask)
plot(plume.signal.ga, col = cividis(100),
main = paste(type,": Gaussian Filter Mask [ppm/m]"),
cex.main = 2.5)
mypath <- file.path("D:","Documents","GEOG MS","ATMOS6240-Land_Atmo_Interactions",    # set save path
"project","Plume_Masking","plumes","Varon_Method",
paste(name,"_gaussian.png"))
dev.copy(png, filename = mypath, width = 1000, height = 784)      # save png
dev.off()
## Final Mask Plot ##
plot(plu.mask, col = cividis(100), main = paste(type,": Final Mask [ppm/m]"), cex.main = 2.5)
mypath <- file.path("D:","Documents","GEOG MS","ATMOS6240-Land_Atmo_Interactions",    # set save path
"project","Plume_Masking","plumes","Varon_Method",
paste(name,"_mask.png"))
dev.copy(png, filename = mypath, width = 1000, height = 784)      # save png
dev.off()
## Plume on RGB Background Plot ##
# sets margins, removes border, sets background color
par(mar = c(1,1,1,3), bty="n", bg="lightsteelblue4")
# creates legend
plot(plu.capped,
col = cols.trans,
legend.args=list( text="CH4 ppm-m",side=3, line=1, font=1),
yaxt = "n",
xaxt = "n",
las = 1,
legend.width = 1.8)
# adds title
title(main = paste("Varon Plume Mask:", type),
cex.main = 2.5,
cex.sub = 2,
sub = print(paste("IME:",IME, "[kg], Plume Area:", p.area , "[m2]")),
line = -4)
# plots RGB image
plotRGB(brk.crop,
stretch = "lin",
add = T)
# plots plume
plot(plu.capped,
col = cols.trans,
legend.width = 1.8,
add = T,)
# save plot
mypath <- file.path("D:","Documents","GEOG MS","ATMOS6240-Land_Atmo_Interactions",    # set save path
"project","Plume_Masking","plumes","Varon_Method",
paste(name,"_Final.png"))
dev.copy(png, filename = mypath, width = 1000, height = 784)        # save png
dev.off()
}
#### Results ####
Varon <- c(name, area, thresh, pixels, p.area, IME)
result_s <- rbind(result_s,Varon)
print(paste(name,"done"))
}
result <- result_s
colnames(result) <- c("Scene","Pixel Size [m2]","Threshold [ppm-m]", "Plume Pixels","Plume Area [m2]","IME [kg]")
mypath <- file.path("E:","KellyO","Plume_Masking","plumes",     # set save path
"Varon_Method","Results_95.csv")
write.csv(result,file = mypath)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, fig.align = 'center', collapse = FALSE, cache=TRUE)
scene.table <- read.csv("scene.table.csv")
scene.table <- read.csv("./scene.table.csv")
scene.table <- read.csv("./scene.table_csv")
scene.table <- read.csv("scene.table_csv")
scene.table <- read.csv("scene_table.csv")
scene.table <- read.csv("./scene_table.csv")
scene.table <- read.csv("/scene_table.csv")
setwd("D:/Documents/GEOG MS/ATMOS6240-Land_Atmo_Interactions/project/Plume_Masking/paper")
scene.table <- read.csv("/scene_table.csv")
scene.table <- read.csv("./scene_table.csv")
scene.table <- read.csv("scene_table.csv")
scene.table <- read.csv("scene_table.csv")
scene.table <- scene.table[-7]
scene.table <- read.csv("scene_table.csv")
scene.table <- scene.table[-7:8]
scene.table <- read.csv("scene_table.csv")
scene.table <- scene.table[-7]
scene.table <- scene.table[-8]
scene.table2 <- head(scene.table)
knitr::kable(scene.table2, col.names = gsub("[.]", " ", names(scene.table)))
scene.table <- read.csv("scene_table.csv")
scene.table <- scene.table[-7]
scene.table <- scene.table[-7]
scene.table2 <- head(scene.table)
knitr::kable(scene.table2, col.names = gsub("[.]", " ", names(scene.table)))
scene.table <- read.csv("scene_table.csv")
scene.table <- scene.table[-7]
scene.table <- scene.table[-7]
scene.table <- scene.table[-4]
scene.table2 <- head(scene.table)
knitr::kable(scene.table2, col.names = gsub("[.]", " ", names(scene.table)))
knitr::include_graphics(c('../plumes/Ayasse_Method/ang20170906t210217 _enhancement.png',
'../plumes/Ayasse_Method/ang20170906t210217 _threshold.png'))
knitr::include_graphics(c('../plumes/Varon_Method/ang20170906t210217 _enhancement.png',
'../plumes/Varon_Method/ang20170906t210217 _threshold.png'))
setwd("D:/Documents/GEOG MS/ATMOS6240-Land_Atmo_Interactions/project/Plume_Masking/paper")
knitr::include_graphics(c('../plumes/Ayasse_Method/Ayasse_Mask_IME.png',
'../plumes/Varon_Method/Ayasse_Mask_Plume_Area.png'))
result <- read.csv("../plumes/Ayasse_Method/Results.csv")
View(result)
result <- result[-1]
scene.names <- c("Coal Vent",
"Pirana Landfill",
"Dairy Feedlot",
"Watershed Treatment",
"Natural Gas",
"Newby Island Landfill",
"Natural Gas 2")
results.df <- as.data.frame(result)
results.split <- split(results.df, results$Scene)
names(results.split) <- scene.names
scene.names <- c("Coal Vent",
"Pirana Landfill",
"Dairy Feedlot",
"Watershed Treatment",
"Natural Gas",
"Newby Island Landfill",
"Natural Gas 2")
results.df <- as.data.frame(result)
results.split <- split(results.df, result$Scene)
names(results.split) <- scene.names
for (i in seq(1,7,1)){
m <- results.split[[i]]
m.name <- scene.names[i]
m.pixel <- m[10,2]
m.thresh <- mean(as.numeric(m[,4]))
m.pixelnum <- mean(as.numeric(m[,5]))
m.parea <- mean(as.numeric(m[,6]))
m.ime <- mean(as.numeric(m[,7]))
means <- c(m.name, m.pixel, m.thresh, m.pixelnum, m.parea, m.ime)
averages <- rbind(averages,means)
}
averages <- NULL
for (i in seq(1,7,1)){
m <- results.split[[i]]
m.name <- scene.names[i]
m.pixel <- m[10,2]
m.thresh <- mean(as.numeric(m[,4]))
m.pixelnum <- mean(as.numeric(m[,5]))
m.parea <- mean(as.numeric(m[,6]))
m.ime <- mean(as.numeric(m[,7]))
means <- c(m.name, m.pixel, m.thresh, m.pixelnum, m.parea, m.ime)
averages <- rbind(averages,means)
}
View(averages)
View(result)
averages.sf <- as.data.frame(averages)
plot(averages.sf[,7] ~ averages.sf[,4], pch = 16, col = "darkorange",
main = "Ayasse Mask Averages: IME ~ Threshold",
ylab = "IME [kg]",
xlab = "Threshold [ppm-m]")
mypath <- file.path("E:","KellyO","Plume_Masking","retrievals",     # set save path
"Ayasse_Method","Ayasse_limited_IME_vs_Threshold.png")
dev.copy(png, filename = mypath, width = 800, height = 504)        # save png
dev.off()
averages.sf <- as.data.frame(averages)
plot(averages.sf[,7] ~ averages.sf[,4], pch = 16, col = "darkorange",
main = "Ayasse Mask Averages: IME ~ Threshold",
ylab = "IME [kg]",
xlab = "Threshold [ppm-m]")
averages.sf <- as.data.frame(averages)
View(averages)
for (i in seq(1,7,1)){
plots <- results.split[[i]]
if (i == 1){
plot(plots[,7] ~ plots[,3],
main = "Ayasse Plume Mask: IME",
type = "l",
lwd = 3,
col = my.pal[1],
ylim = c(0,375),
ylab = "IME [kg]",
xlab = "Perct. SD subtracted from Mean",
bty = 'L')
}else{
lines(plots[,7] ~ plots[,3], lwd = 3, col = my.pal[i])
}
}
legend("topleft",
legend = scene.names,
col = my.pal,
lwd = 3,
cex = 1.2,
bty = "n")
my.pal <- brewer.pal(7, "Set3")
for (i in seq(1,7,1)){
plots <- results.split[[i]]
if (i == 1){
plot(plots[,7] ~ plots[,3],
main = "Ayasse Plume Mask: IME",
type = "l",
lwd = 3,
col = my.pal[1],
ylim = c(0,375),
ylab = "IME [kg]",
xlab = "Perct. SD subtracted from Mean",
bty = 'L')
}else{
lines(plots[,7] ~ plots[,3], lwd = 3, col = my.pal[i])
}
}
legend("topleft",
legend = scene.names,
col = my.pal,
lwd = 3,
cex = 1.2,
bty = "n")
View(results.split)
my.pal <- brewer.pal(7, "Set3")
## Plot IME ~ SD ##
for (i in seq(1,7,1)){
plots <- results.split[[i]]
if (i == 1){
plot(plots[,7] ~ plots[,3],
main = "Ayasse Plume Mask: IME",
type = "l",
lwd = 3,
col = my.pal[1],
ylim = c(0,375),
ylab = "IME [kg]",
xlab = "Perct. SD subtracted from Mean",
bty = 'L')
}else{
lines(plots[,7] ~ plots[,3], lwd = 3, col = my.pal[i])
}
}
legend("topleft",
legend = scene.names,
col = my.pal,
lwd = 3,
cex = 1.2,
bty = "n")
library(RColorBrewer)
my.pal <- brewer.pal(7, "Set3")
## Plot IME ~ SD ##
for (i in seq(1,7,1)){
plots <- results.split[[i]]
if (i == 1){
plot(plots[,7] ~ plots[,3],
main = "Ayasse Plume Mask: IME",
type = "l",
lwd = 3,
col = my.pal[1],
ylim = c(0,375),
ylab = "IME [kg]",
xlab = "Perct. SD subtracted from Mean",
bty = 'L')
}else{
lines(plots[,7] ~ plots[,3], lwd = 3, col = my.pal[i])
}
}
legend("topleft",
legend = scene.names,
col = my.pal,
lwd = 3,
cex = 1.2,
bty = "n")
my.pal <- brewer.pal(7, "Set3")
## Plot IME ~ SD ##
for (i in seq(1,7,1)){
plots <- results.split[[i]]
if (i == 1){
plot(plots[,7] ~ plots[,3],
main = "Ayasse Plume Mask: IME",
type = "l",
lwd = 3,
col = my.pal[1],
ylim = c(0,100),
xlim = c(0,0.3),
ylab = "IME [kg]",
xlab = "Perct. SD subtracted from Mean",
bty = 'L')
}else{
lines(plots[,7] ~ plots[,3], lwd = 3, col = my.pal[i])
}
}
legend("topleft",
legend = scene.names,
col = my.pal,
lwd = 3,
cex = 1.2,
bty = "n")
my.pal <- brewer.pal(7, "Set3")
## Plot IME ~ SD ##
for (i in seq(1,7,1)){
plots <- results.split[[i]]
if (i == 1){
plot(plots[,7] ~ plots[,3],
main = "Ayasse Plume Mask: IME",
type = "l",
lwd = 3,
col = my.pal[1],
ylim = c(0,100),
xlim = c(0,0.3),
ylab = "IME [kg]",
xlab = "Perct. SD subtracted from Mean",
bty = 'L')
}else{
lines(plots[,7] ~ plots[,3], lwd = 3, col = my.pal[i])
}
}
legend("topleft",
legend = scene.names,
col = my.pal,
lwd = 3,
cex = 1.2,
bty = "n")
mypath <- file.path("D:","Documents","GEOG MS","ATMOS6240-Land_Atmo_Interactions","project","Plume_Masking","retrievals",     # set save path
"Ayasse_Method","Ayasse_Mask_IME_zoomed.png")
dev.copy(png, filename = mypath, width = 800, height = 504)        # save png
dev.off()
my.pal <- brewer.pal(7, "Set3")
## Plot IME ~ SD ##
for (i in seq(1,7,1)){
plots <- results.split[[i]]
if (i == 1){
plot(plots[,7] ~ plots[,3],
main = "Ayasse Plume Mask: IME",
type = "l",
lwd = 3,
col = my.pal[1],
ylim = c(0,100),
xlim = c(0,0.3),
ylab = "IME [kg]",
xlab = "Perct. SD subtracted from Mean",
bty = 'L')
}else{
lines(plots[,7] ~ plots[,3], lwd = 3, col = my.pal[i])
}
}
legend("topleft",
legend = scene.names,
col = my.pal,
lwd = 3,
cex = 1.2,
bty = "n")
mypath <- file.path("D:","Documents","GEOG MS","ATMOS6240-Land_Atmo_Interactions","project","Plume_Masking","plumes",     # set save path
"Ayasse_Method","Ayasse_Mask_IME_zoomed.png")
dev.copy(png, filename = mypath, width = 800, height = 504)        # save png
dev.off()
ayasse.table <- read.csv("ayasse_table.csv")
ayasse.table2 <- head(ayasse.table)
knitr::kable(ayasse.table2, col.names = gsub("[.]", " ", names(ayasse.table)),
align = "c", caption = "Standard Ayasse Method Results")
View(averages.sf)
View(averages.sf)
View(ayasse.table)
View(ayasse.table)
ayasse.table <- read.csv("ayasse_table.csv")
ayasse.table2 <- head(ayasse.table)
knitr::kable(ayasse.table2, col.names = names(ayasse.table)),
ayasse.table <- read.csv("ayasse_table.csv")
ayasse.table2 <- head(ayasse.table)
knitr::kable(ayasse.table2, col.names = names(ayasse.table),
align = "c", caption = "Standard Ayasse Method Results")
ayasse.table <- read.csv("ayasse_table.csv")
ayasse.table2 <- head(ayasse.table)
knitr::kable(ayasse.table, col.names = gsub("[.]", " ", names(ayasse.table)),
align = "c", caption = "Standard Ayasse Method Results")
ayasse.table <- read.csv("ayasse_table.csv")
ayasse.table2 <- head(ayasse.table)
knitr::kable(ayasse.table2, col.names = gsub("[.]", " ", names(ayasse.table)),
align = "c", caption = "Standard Ayasse Method Results")
ayasse.table <- read.csv("ayasse_table.csv")
ayasse.table2 <- head(ayasse.table)
knitr::kable(ayasse.table, col.names = gsub("[.]", " ", names(ayasse.table)),
align = "c", caption = "Standard Ayasse Method Results")
varon.table <- read.csv("varon_table.csv")
varon.table2 <- head(varon.table)
knitr::kable(varon.table, col.names = gsub("[.]", " ", names(varon.table)),
align = "c", caption = "Standard Varon Method Results")
ayasse.table <- read.csv("ayasse_table.csv")
knitr::kable(ayasse.table, col.names = gsub("[.]", " ", names(ayasse.table)),
align = "c", caption = "Standard Ayasse Method Results")
ayasse.av.table <- read.csv("ayasse_averaged_table.csv")
knitr::kable(ayasse.av.table, col.names = gsub("[.]", " ", names(ayasse.av.table)),
align = "c", caption = "Averaged Results from Iterative Ayasse Thresholds")
varon.av.table <- read.csv("varon_averaged_table.csv")
knitr::kable(varon.av.table, col.names = gsub("[.]", " ", names(varon.av.table)),
align = "c", caption = "Averaged Results from Iterative Varon Thresholds")
change.table <- read.csv("percent_change_table.csv")
knitr::kable(change.table, col.names = gsub("[.]", " ", names(change.table)),
align = "c", caption = "Percentage Change Between Ayasse and Varon Masks")
knitr::include_graphics(c('../plumes/Varon_Method/Varon_Mask_IME_mean_limited.png',
'../plumes/Varon_Method/Varon_Mask_IME.png'))
setwd("~/GitHub/slc-camp-maps")
